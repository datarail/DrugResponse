function p = parseCellCycleInputs(varargin)

p = inputParser;

% names used for each channel
addParameter(p, 'Channelnames', ...
    struct('LDR', 'NucleiSelected_LDRTXTSERSpot8Px', ...
    'DNA', 'NucleiSelected_DNAcontent', ...
    'EdU', 'NucleiSelected_EdUINT', ...
    'pH3', 'NucleiSelected_PH3INT'), ...
    @(x) isstruct(x) && isfield(x,'LDR') && isfield(x,'DNA'))
% default to save the results as images; empty if not saving
addParameter(p, 'savefolder', '', @ischar)
% additional keys to consider for ananlyzing the results
addParameter(p, 'ConditionKeys', {}, @cellstr)
% flags for the type of treatments
addParameter(p, 'NegCtrlLabel', {'Ctl_vehicle' 'ctl_vehicle' 'untrt' 'Untrt'}, @cellstr)
addParameter(p, 'PosCtrlLabel', {'ctl_toxic' 'ctl_G1' 'ctl_S' 'ctl_G2'}, @cellstr)
% define cutoffs for tests
addParameter(p, 'TestCutoffs', ...
     struct(...
    'FracDead', .1, ...
    'DeadConsist', .02, ...
    'Unclass', .05, ...
    'CCphase', .01, ...
    'CCphase_pos', @(x)1.3+x+.1, ...
    'CCConsist', .02, ...
    'PksConsist', log10(1.2)), ...
    @(x) isstruct(x) && all(isfield(x, {'FracDead', 'DeadConsist', 'Unclass', ...
    'CCphase', 'CCphase_pos', 'CCConsist', 'PksConsist'})))
addParameter(p, 'CellFrac_Adpative_pH3cutoff', 1/3, @(x) isscalar(x) || isempty(x))
addParameter(p, 'interactive', false, @islogical) %%%   option ?? <<<<<<<<<<<<<<<----------------------
addParameter(p, 'plotting', false, @islogical) %%%   option ?? <<<<<<<<<<<<<<<----------------------

parse(p,varargin{:});
p = p.Results;
if isempty(p.CellFrac_Adpative_pH3cutoff), p.CellFrac_Adpative_pH3cutoff = -1; end

% default to save the results as images; empty if not saving
if ~isempty(p.savefolder) && ~exist(p.savefolder,'dir'), mkdir(p.savefolder); end
%%%   option to save only if a test fails ?? <<<<<<<<<<<<<<<----------------------
